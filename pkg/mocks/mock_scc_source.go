// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aserto-dev/scc-lib/sources (interfaces: Source)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/aserto-dev/go-grpc/aserto/api/v1"
	scc "github.com/aserto-dev/go-grpc/aserto/tenant/scc/v1"
	sources "github.com/aserto-dev/scc-lib/sources"
	gomock "github.com/golang/mock/gomock"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// AddSecretToRepo mocks base method.
func (m *MockSource) AddSecretToRepo(arg0 context.Context, arg1 *sources.AccessToken, arg2, arg3, arg4, arg5 string, arg6 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecretToRepo", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecretToRepo indicates an expected call of AddSecretToRepo.
func (mr *MockSourceMockRecorder) AddSecretToRepo(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretToRepo", reflect.TypeOf((*MockSource)(nil).AddSecretToRepo), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// CreateCommitOnBranch mocks base method.
func (m *MockSource) CreateCommitOnBranch(arg0 context.Context, arg1 *sources.AccessToken, arg2 *sources.Commit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommitOnBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommitOnBranch indicates an expected call of CreateCommitOnBranch.
func (mr *MockSourceMockRecorder) CreateCommitOnBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommitOnBranch", reflect.TypeOf((*MockSource)(nil).CreateCommitOnBranch), arg0, arg1, arg2)
}

// CreateRepo mocks base method.
func (m *MockSource) CreateRepo(arg0 context.Context, arg1 *sources.AccessToken, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockSourceMockRecorder) CreateRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockSource)(nil).CreateRepo), arg0, arg1, arg2, arg3)
}

// GetDefaultBranch mocks base method.
func (m *MockSource) GetDefaultBranch(arg0 context.Context, arg1 *sources.AccessToken, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockSourceMockRecorder) GetDefaultBranch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockSource)(nil).GetDefaultBranch), arg0, arg1, arg2, arg3)
}

// GetRepo mocks base method.
func (m *MockSource) GetRepo(arg0 context.Context, arg1 *sources.AccessToken, arg2, arg3 string) (*scc.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*scc.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockSourceMockRecorder) GetRepo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockSource)(nil).GetRepo), arg0, arg1, arg2, arg3)
}

// HasSecret mocks base method.
func (m *MockSource) HasSecret(arg0 context.Context, arg1 *sources.AccessToken, arg2, arg3, arg4 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSecret", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSecret indicates an expected call of HasSecret.
func (mr *MockSourceMockRecorder) HasSecret(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSecret", reflect.TypeOf((*MockSource)(nil).HasSecret), arg0, arg1, arg2, arg3, arg4)
}

// InitialTag mocks base method.
func (m *MockSource) InitialTag(arg0 context.Context, arg1 *sources.AccessToken, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitialTag indicates an expected call of InitialTag.
func (mr *MockSourceMockRecorder) InitialTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialTag", reflect.TypeOf((*MockSource)(nil).InitialTag), arg0, arg1, arg2)
}

// ListOrgs mocks base method.
func (m *MockSource) ListOrgs(arg0 context.Context, arg1 *sources.AccessToken, arg2 *api.PaginationRequest) ([]*api.SccOrg, *api.PaginationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrgs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.SccOrg)
	ret1, _ := ret[1].(*api.PaginationResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOrgs indicates an expected call of ListOrgs.
func (mr *MockSourceMockRecorder) ListOrgs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrgs", reflect.TypeOf((*MockSource)(nil).ListOrgs), arg0, arg1, arg2)
}

// ListRepos mocks base method.
func (m *MockSource) ListRepos(arg0 context.Context, arg1 *sources.AccessToken, arg2 string, arg3 *api.PaginationRequest) ([]*scc.Repo, *api.PaginationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepos", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*scc.Repo)
	ret1, _ := ret[1].(*api.PaginationResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepos indicates an expected call of ListRepos.
func (mr *MockSourceMockRecorder) ListRepos(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepos", reflect.TypeOf((*MockSource)(nil).ListRepos), arg0, arg1, arg2, arg3)
}

// Profile mocks base method.
func (m *MockSource) Profile(arg0 context.Context, arg1 *sources.AccessToken) (string, []*scc.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*scc.Repo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Profile indicates an expected call of Profile.
func (mr *MockSourceMockRecorder) Profile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockSource)(nil).Profile), arg0, arg1)
}

// ValidateConnection mocks base method.
func (m *MockSource) ValidateConnection(arg0 context.Context, arg1 *sources.AccessToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateConnection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateConnection indicates an expected call of ValidateConnection.
func (mr *MockSourceMockRecorder) ValidateConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateConnection", reflect.TypeOf((*MockSource)(nil).ValidateConnection), arg0, arg1)
}
